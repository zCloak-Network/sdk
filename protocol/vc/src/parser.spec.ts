// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

import type { VerifiableCredential } from './types';

import { initCrypto } from '@zcloak/crypto';

import { toMidenInput } from './parser';

const credential: VerifiableCredential<false> = {
  '@context': ['https://www.w3.org/2018/credentials/v1'],
  version: '1',
  ctype: '0x1209c3865ae4631cceacfbb3d4a946fec4ff97d3c7454a0383cb7e26b0bb8189',
  issuanceDate: 1683718402209,
  credentialSubject: {
    name: 'zCloak',
    birth: 655660800,
    nation: 156,
    risklevel: 2
  },
  issuer: 'did:zk:0x57E7b664aaa7C895878DdCa5790526B9659350Ec',
  holder: 'did:zk:0x11f8b77F34FCF14B7095BF5228Ac0606324E82D1',
  hasher: ['RescuePrimeOptimized', 'Keccak256'],
  digest: '0xbd14425c336375acc386f91c6240e5504c9553194da7133df5059bd31d217ae3',
  proof: [
    {
      type: 'EcdsaSecp256k1SignatureEip191',
      created: 1683718402236,
      verificationMethod: 'did:zk:0x57E7b664aaa7C895878DdCa5790526B9659350Ec#key-0',
      proofPurpose: 'assertionMethod',
      proofValue: 'zL2U7S8MpWhyHoZVZ7CAX2Qa2K1MuL34JeWqSoNNXj7fWcHRYgv79ej6wTGwTJMzEgihA5XN19kUha14jKi5EPZyhJ'
    }
  ],
  credentialSubjectHashes: [
    '0x3bc94c3cbb379170211c638732d6b6c0c502b14b608dd3360fae3e1584290c17',
    '0x9049518831c2e080e83a6503ab9dbb00fe23c56de653e2ea66a180b89f1173ac',
    '0x050cc39d59661fbd8439a441a6d5a2e1f2ba3d23ea9a11167ca386871dc25296',
    '0xcc9cd567c75cf0846d95d734eb5c86b1deb43549e0168fc2e37e38fdd05dbb7a'
  ],
  credentialSubjectNonceMap: {
    '0x231908b8ae5383c36692acf228bab264e4d9aedb54346cf4a945857a0a115ce0':
      '0x50a0a09e297c049196edbf7fd47cd80ad2c4c5426b0ea2d9c6cdadaea3c2ed87',
    '0xa35fcb7b2f25123f34d7a00321081d2be1e6aa59bc38c5a1fb67b0b627ed716d':
      '0x9fb6d2dbbe7a6565bf7702db629418d2f60d65016416d758c1e0f81667133492',
    '0x747e81e49d695483a90dc5193bfbce117649f242c629937926ce312ad8586561':
      '0xc78ccc2907b8c42bbfaccfb759eb64bb6a25f64df1f547aea70228f793f35831',
    '0xfd51749625f476ad424f2f7a3298be8abfb3528acd9d5f6f6960e211fbed091f':
      '0x36320a331e33918cbf004a4b794cb3932d5a573f2d77485f0b0d7d9a4b3edd1c'
  }
};

describe('toMidenInput', (): void => {
  beforeAll(async (): Promise<void> => {
    await initCrypto();
  });

  it('parse single leave', (): void => {
    expect(toMidenInput(credential, [1])).toBe(
      '3674729300166447914,7779053615117167694,15124102116683551765,11204930390713932501,132,39,20,151,0,1,0,0,7306380930628892319,15139013299708000191,6401610014106390006,10535066761814401217,8111325681181051195,13886522013551631393,3950656742860325573,1660748009861721615,17982924301787050336,5566739416675350805,6912534093008768096,14337068781135257318'
    );

    expect(toMidenInput(credential, [2])).toBe(
      '3674729300166447914,7779053615117167694,15124102116683551765,11204930390713932501,129,156,1,0,0,0,0,0,3153847979971742919,13503176353332047039,12558276502689817962,3555859722641343143,9579258418927344844,12792013956866086253,14019449317584385246,8843765445455019747,6818905644224928008,16085110059545484131,2166983179458595526,10969881341063792777'
    );
  });

  it('parse multiple leaves', (): void => {
    expect(toMidenInput(credential, [1, 2])).toBe(
      '3674729300166447914,7779053615117167694,15124102116683551765,11204930390713932501,132,39,20,151,0,1,0,0,7306380930628892319,15139013299708000191,6401610014106390006,10535066761814401217,8111325681181051195,13886522013551631393,3950656742860325573,1660748009861721615,17982924301787050336,5566739416675350805,6912534093008768096,14337068781135257318,129,156,1,0,0,0,0,0,3153847979971742919,13503176353332047039,12558276502689817962,3555859722641343143,9579258418927344844,12792013956866086253,14019449317584385246,8843765445455019747,6818905644224928008,16085110059545484131,2166983179458595526,10969881341063792777'
    );
  });
});
